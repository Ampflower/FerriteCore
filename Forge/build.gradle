import java.util.stream.Collectors

plugins {
    id 'ferritecore.loader-conventions'
    id 'net.neoforged.gradle.userdev' version "${neogradle_version}"
}

// Work around what I consider a bug in FG: Common:googleimpl source set is specified as mod source, but FG tries to
// compile it in this project
// TODO remove old hacks and add new ones for NG
sourceSets {
    googleimpl
}

runs {
    configureEach {
        workingDirectory project.file('run')
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
        //modSource project(":Common").sourceSets.main
        //modSource project(":Common").sourceSets.googleimpl
        // TODO do I need mixin configs as args
    }
    client
    server
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

jar {
    filesMatching("*.mixin.json") {
        expand "refmap_target": "${mod_id}."
    }
}

// For some reason this doesn't work when in the "convention" scripts...
def customGradle = project.file('custom.gradle');
if (customGradle.exists()) {
    apply from: customGradle;
}
